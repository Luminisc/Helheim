PS：撸主自制字库可不死机运行


概述:
整个字库分为文件头、sjis计数、索引、以及字模四个部分，以下分解如不个别标注，数据存放方式均为little endian。



part1- 文件头

offset         意义

0x0-0x3        字库类型

0x4-0x7        所含字模的数量

0x8-0xB        应该是字模的读取方式(有待验证 猜测原因:两个案例的0x8和0xB相同,所以可能没有意义 0x9,0xA与字模宽高接近)

0xc-0xF        字模透明度

0x10-0x13      整个字库的总长度

0x14-0x17      sjis计数的起始地址

0x18-0x1B      索引的起始地址

0x1C-0x1F      字模的起始地址



案例B没什么问题 案例A从0x20-0x428均为无意义字节



part2- sjis计数

因为各个文件不一样，以下地址需要自行加上sjis计数的偏移地址



offset          意义 (每段计数均为12个字节)

0x0-0x3         第一段计数的起始，可以看到是编码为20

0x4-0x7         第一段计数的结束，可以看到是编码为7F (7F-20=5F)

0x8-0xB         当前总计数(不含该段)，可以看到是0x0



0xC-0xF		第二段计数的起始，可以看到是编码为A1

0x10-0x13       第二段计数的结束，可以看到是编码为E0 (E0-A1=3F)

0x14-0x17	当前总计数(不含该段)，可以看到是0x5F (0x0+5F)



0x18-0x1B	第三段计数的起始，可以看到是编码为8140

0x1C-0x1F	第三段计数的结束，可以看到是编码为817F

0x20-0x23	当前总计数(不含该段)，可以看到是0x9E (0x5F+0x3F)



以下类推



part3- 索引
因为各个文件不一样，以下地址需要自行加上索引的偏移地址

offset          意义 (每段计数均为8个字节)

0x0-0x1         字模的宽和高
0x2-0x3         字模所含的字节数
0x4-0x7         字模的起始地址(这里记录的起始地址需加上文件头里给出的字模起始偏移)

以下类推

part4- 字模

根据索引到每个字模的起始地址
标记读取到的第一个4bits为压缩标志
再向后读取12bits 为压缩次数(按4bits计算)

之后是直读 直到再次出现压缩标志 然后循环

-解压原理

读取压缩标志
读取压缩次数

写入重复数据(按4bits计算)
写入直读数据

然后重复操作

-计算演示
案例A

读取压缩标志"C"
读取压缩次数211次

重复写入211次某4bits的数据，比如0xF

再次读取压缩标志"C"
读取压缩次数066次

重复重复写入66次0xF

直读676(因为再下一个是C)
写入676

以下类推

案例B

压缩标志为"8"

自己类推

-破解思路
压缩回去的话不方便制作索引，所以干脆就不压缩回去
将压缩次数记为0即可


Analyze by UnknownID